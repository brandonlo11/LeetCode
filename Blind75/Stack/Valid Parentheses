class Solution {
public:
    bool isValid(string s) {
        stack<char> first;
        unordered_map<char, char> valid;
        valid[')'] = '(';
        valid[']'] = '[';
        valid['}'] = '{';
        for (int i = 0; i < s.size(); i++){
            if ( (s[i] == ')') || (s[i] == ']') || (s[i] == '}')){
                if ((first.empty()) || (first.top() != valid[s[i]])){
                    return false;
                } else {
                    first.pop();
                }
            } else if ( (s[i] == '(') || (s[i] == '[') || (s[i] == '{')){
                first.push(s[i]);
            }
        } 
        return first.empty();
    }
};

//Runtime -ms Beats 100.00%of users with C++
//Memory 6.43mb Beats 8.75%of users with C++
