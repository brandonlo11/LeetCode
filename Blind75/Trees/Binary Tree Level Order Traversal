/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        queue<TreeNode*> nodes;
        int size = 0;
        if (root != NULL)
            nodes.push(root);
        while (!nodes.empty()){
            size = nodes.size();
            vector<int> level;
            for (int i = 0; i < size; i++){
                TreeNode* temp;
                temp = nodes.front();
                nodes.pop();
                if (temp != NULL){
                    level.push_back(temp->val);
                    if (temp->left != NULL)
                        nodes.push(temp->left);
                    if (temp->right != NULL)
                        nodes.push(temp->right);
                }
            }
            ans.push_back(level);
        }
        return ans;
    }
};

//Runtime -ms Beats 100.00% of users with C++
//Memory 13.50mb Beats 76.16% of users with C++
