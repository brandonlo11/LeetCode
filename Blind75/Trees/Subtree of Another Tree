/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if (subRoot == NULL){
            return true;
        }
        if (root == NULL){
            return false;
        }
        if (sameTree(root, subRoot)){
            return true;
        }
        return isSubtree(root->left, subRoot) || isSubtree(root->right, subRoot);
        
    }

    bool sameTree(TreeNode* p, TreeNode* q){
        if ((p == NULL) &&(q == NULL)){
            return true;
        }
        if ((p != NULL) && (q != NULL) &&(p->val == q->val)){
            return sameTree(p->left, q->left) && sameTree(p->right, q->right);
        }
        return false;
    }
};

//Runtime 17ms Beats 94.96%of users with C++
//Memory 28.73mb Beats 63.79%of users with C++
