/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int n = 0;
        int ans = 0;
        TreeNode* curr = root;
        stack<TreeNode*> nodes;

        while ((curr != NULL) || (!nodes.empty())){
            while (curr != NULL){
                nodes.push(curr);
                curr = curr->left;
            }
            curr = nodes.top();
            nodes.pop();
            n +=1;
            if (n == k){
                ans = curr->val;
            }
            curr = curr->right;

        }
        return ans;
    }
};

//Runtime 17ms Beats 65.91% of users with C++
//Memory 24.18mb Beats 44.89% of users with C++
