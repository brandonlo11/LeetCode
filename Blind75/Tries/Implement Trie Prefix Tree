struct trieNode{
        bool isEnd;
        trieNode *next[26];

        trieNode() {
            for (int i = 0; i < 26; i++) {
                next[i] = NULL;
            }
            isEnd = false;
        }
    };

class Trie {
private:
    trieNode *root;
public:
    
    Trie() {
        root = new trieNode();
    }
    
    void insert(string word) {
        trieNode* curr = root;
        int count = 0;
        for (int i = 0; i < word.size(); i++){
            count = word[i]-'a';
            if (curr->next[count]==NULL){
                curr->next[count] = new trieNode();
            }
            curr = curr->next[count];
        }
        curr->isEnd = true;
    }
    
    bool search(string word) {
        trieNode* curr = root;
        int count = 0;
        for (int i = 0; i < word.size(); i++){
            count = word[i]-'a';
            if (curr->next[count]==NULL){
                return false;
            }
            curr = curr->next[count];
        }
        return curr->isEnd;
    }
    
    bool startsWith(string prefix) {
        trieNode* curr = root;
        int count = 0;
        for (int i = 0; i < prefix.size(); i++){
            count = prefix[i]-'a';
            if (curr->next[count]==NULL){
                return false;
            }
            curr = curr->next[count];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

//Runtime 57ms Beats 85.47% of users with C++
//Memory 45.06mb Beats 37.52% of users with C++
